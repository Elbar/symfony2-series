Autoloading: Where did require/include go?
==========================================

Before we move on, I want to say a quick word on autoloading. Composer packages
a special "class loader", which makes it possible to use classes without worrying
about calling ``include`` on the file that holds them.

There are two major parts to understanding how Composer's autoloader works.

First, in order for it to work, the namespace of each of your classes must follow
the directory structure of the file it lives in. For example, in our play script,
if I create a new Event object, Composer silently autoloads the class for us. But
if I change the directory name to ``Entity2``, Composer can't find the file anymore.

.. code-block:: text

    use Yoda\EventBundle\Entity\Event;
    
    // the src/Yoda/EventBundle/Entity/Event.php file is "included"
    // .. so the file better exist and "house" the Event class!
    new Event();

The moral of part one is this: if each class name matches its directory
structure, you'll be fine. And if you see a "Class not found" exception,
check the spelling on your class name and file path.

The second thing to understand is that when you bring in a new library via
Composer, it automatically configures its autoloader to look in the new directory.
Open up the ``vendor/composer/autoload_namespaces.php`` file, which
is generated by Composer. This contains a map of namespaces to the directories
where that namespace can be found::

    // vendor/composer/autoload_namespaces.php
    // ...
    
    return array(
        // ...
        'Doctrine\\ORM' => $vendorDir . '/doctrine/orm/lib/',
        'Doctrine\\DBAL' => $vendorDir . '/doctrine/dbal/lib/',
        'Doctrine\\Common\\DataFixtures' => $vendorDir . '/doctrine/data-fixtures/lib/',
        // ...
    );

Notice that our fixtures namespaces are in here - this file is updated every
time you update with Composer.

Composer's actual autoloader is located at ``vendor/autoload.php``, and we're
including it in our project in the ``app/autoload.php`` file. You probably
won't need to worry too much about these files, but it's important to understand
that autoloading is happening, and it's being handled by Composer.
